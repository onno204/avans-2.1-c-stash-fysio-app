// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20211026021955_AddedDevUser1")]
    partial class AddedDevUser1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdditionalIdentifier")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DcsphCode")
                        .HasColumnType("int");

                    b.Property<string>("DcsphDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDateTreatment")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GlobalDescriptionComplaints")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntakeSuperVisionUserUserId")
                        .HasColumnType("int");

                    b.Property<int?>("IntakeUserUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MainTherapistUserId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("IntakeSuperVisionUserUserId");

                    b.HasIndex("IntakeUserUserId");

                    b.HasIndex("MainTherapistUserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AdditionalIdentifier = 2167988,
                            BirthDate = new DateTime(2002, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DcsphCode = 999,
                            DcsphDescription = "unknown",
                            Email = "o.vanhelfteren@student.avans.nl",
                            EndDateTreatment = new DateTime(2021, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FullName = "Onno van Helfteren",
                            Gender = 0,
                            GlobalDescriptionComplaints = "Heel veel klachten",
                            SignUpDate = new DateTime(2021, 10, 26, 4, 19, 55, 133, DateTimeKind.Local).AddTicks(3150),
                            TreatmentPlan = "Geen",
                            UserType = 0
                        });
                });

            modelBuilder.Entity("Core.Domain.User", b =>
                {
                    b.HasOne("Core.Domain.User", "IntakeSuperVisionUser")
                        .WithMany()
                        .HasForeignKey("IntakeSuperVisionUserUserId");

                    b.HasOne("Core.Domain.User", "IntakeUser")
                        .WithMany()
                        .HasForeignKey("IntakeUserUserId");

                    b.HasOne("Core.Domain.User", "MainTherapist")
                        .WithMany()
                        .HasForeignKey("MainTherapistUserId");

                    b.OwnsMany("Core.Domain.Appointment", "Appointments", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<int>("AppointmentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("AppointmentCreatedByUserId")
                                .HasColumnType("int");

                            b1.Property<int>("AppointmentUserId")
                                .HasColumnType("int");

                            b1.Property<int>("AppointmentWithUserId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.HasKey("UserId", "AppointmentId");

                            b1.HasIndex("AppointmentCreatedByUserId");

                            b1.HasIndex("AppointmentUserId");

                            b1.HasIndex("AppointmentWithUserId");

                            b1.ToTable("Appointment");

                            b1.HasOne("Core.Domain.User", "AppointmentCreatedByUser")
                                .WithMany()
                                .HasForeignKey("AppointmentCreatedByUserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("Core.Domain.User", "AppointmentUser")
                                .WithMany()
                                .HasForeignKey("AppointmentUserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("Core.Domain.User", "AppointmentWithUser")
                                .WithMany()
                                .HasForeignKey("AppointmentWithUserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("AppointmentCreatedByUser");

                            b1.Navigation("AppointmentUser");

                            b1.Navigation("AppointmentWithUser");
                        });

                    b.OwnsMany("Core.Domain.Comment", "Comments", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<int>("CommentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CommentMadeById")
                                .HasColumnType("int");

                            b1.Property<string>("CommentText")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("CommentUserId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<bool>("PubliclyVisible")
                                .HasColumnType("bit");

                            b1.HasKey("UserId", "CommentId");

                            b1.HasIndex("CommentMadeById");

                            b1.HasIndex("CommentUserId");

                            b1.ToTable("Comment");

                            b1.HasOne("Core.Domain.User", "CommentMadeBy")
                                .WithMany()
                                .HasForeignKey("CommentMadeById")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("Core.Domain.User", "CommentUser")
                                .WithMany()
                                .HasForeignKey("CommentUserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("CommentMadeBy");

                            b1.Navigation("CommentUser");
                        });

                    b.OwnsMany("Core.Domain.Treatment", "TreatmentHistory", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<int>("TreatmentId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("CarriedOutByUserId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Description")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Room")
                                .HasColumnType("int");

                            b1.Property<int>("TreatmentUserId")
                                .HasColumnType("int");

                            b1.Property<string>("VektisExplanation")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("VektisId")
                                .HasColumnType("int");

                            b1.HasKey("UserId", "TreatmentId");

                            b1.HasIndex("CarriedOutByUserId");

                            b1.HasIndex("TreatmentUserId");

                            b1.ToTable("Treatment");

                            b1.HasOne("Core.Domain.User", "CarriedOutByUser")
                                .WithMany()
                                .HasForeignKey("CarriedOutByUserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.HasOne("Core.Domain.User", "TreatmentUser")
                                .WithMany()
                                .HasForeignKey("TreatmentUserId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.Navigation("CarriedOutByUser");

                            b1.Navigation("TreatmentUser");
                        });

                    b.Navigation("Appointments");

                    b.Navigation("Comments");

                    b.Navigation("IntakeSuperVisionUser");

                    b.Navigation("IntakeUser");

                    b.Navigation("MainTherapist");

                    b.Navigation("TreatmentHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
